library(openxlsx)
library(forecast)
library(xts)
library(ggplot2)
library(ggfortify) #Plot Monthplot
library(TSA)
library(lmtest)


set.seed(123)
datosCompletos <- read.xlsx('data.xlsx', colNames = T)
str(datosCompletos)

## An치lisis Exploratorio de Datos ##

#Dado que el fichero inicial no tiene NA's los dem치s tampoco los tendr치n
sum(is.na(datosCompletos))

#Todas son variables de tipo numerico
#Tendremos que trabajar la columna de la fecha y las semanas

cuotaCrest <- datosCompletos$Crest
cuotaColgate <- datosCompletos$Colgate

generateDate <- seq(as.Date('1958/01/08'), as.Date('1963/04/23'), by = 'week')

xCuotaCrest <- xts(cuotaCrest, order.by = generateDate)
xCuotaColgate <- xts(cuotaColgate, order.by = generateDate)

#Vamos a pasarlo a trimestre para operar mejor
xCuotaCrest <- to.weekly(xCuotaCrest)
zCuotaCrest <- as.zoo(xCuotaCrest$xCuotaCrest.Close)

xCuotaColgate <- to.weekly(xCuotaColgate)
zCuotaColgate <- as.zoo(xCuotaColgate$xCuotaColgate.Close)

names(zCuotaCrest) <- 'CuotaMercado'
names(zCuotaColgate) <- 'CuotaMercado'

#Primera aproximacion
autoplot(zCuotaCrest) + geom_point() +
  ylab("Ventas") + ggtitle("Cuota semanal Crest") + xlab("Semanas") + 
  ggtitle('Representacion Crest')

autoplot(zCuotaColgate) + geom_point() +
  ylab("Ventas") + ggtitle("Cuota semanal Colgate") + xlab("Semanas") + 
  ggtitle('Representacion Colgate')


#Select number of observation to compare forecast
cOmit = 16

#Data Size
nObs = length(zCuotaCrest)

#sub_sample
#oVentas=zVentas[1:(nObs-cOmit),]
oVentas <- window(zCuotaCrest, start = index(zCuotaCrest[1]), end = index(zCuotaCrest[nObs - cOmit]))

#Fit Simple Exponential Smoothing
fit1 <- ses(oVentas)

#Fit Holt
fit2 <- holt(oVentas)

#Fit Holt- exponential
fit3 <- holt(oVentas,exponential = TRUE)

#Fit Holt - damped
fit4 <- holt(oVentas,damped = TRUE)

#Fit Holt - (exponential+damped)
fit5 <- holt(oVentas,exponential = TRUE,damped = TRUE)

# Results for first model:
fit1$model
fit1$residuals

library(plotly)
plot(fit3, type = "o", ylab = "Ventas",  flwd = 1, plot.conf = FALSE)
lines(window(zVentas), type = "o")
lines(fit1$mean, col = 2)
lines(fit2$mean, col = 3)
lines(fit4$mean, col = 5)
lines(fit5$mean, col = 6)
legend("topleft", lty = 1, pch = 1, col = 1:6,
       c("Data","SES","Holt's","Exponcial",
         "Additive Damped","Multiplicative Damped"))

#seasonal model Holt-winters
fit6 <- hw(oVentas,seasonal="additive")
fit7 <- hw(oVentas,seasonal="multiplicative")

#Plot models
plot(fit7,ylab="Ventas",
     plot.conf=FALSE, type="o", fcol="white", xlab="Year")
lines(window(zVentas),type="o",col="blue")
lines(fitted(fit6), col="red", lty=2)
lines(fitted(fit7), col="green", lty=2)
lines(fit6$mean, type="o", col="red")
lines(fit7$mean, type="o", col="green")
legend("topleft",lty=1, pch=1, col=1:3, 
       c("data","Holt Winters' Additive","Holt Winters' Multiplicative"))



#Calculate Components
states <- cbind(fit6$model$states[,1:3],fit7$model$states[,1:3])
colnames(states) <- c("level","slope","seasonal","level","slope","seasonal")
plot(states, xlab = "Year")
fit6$model$state[,1:3]
fitted(fit6)
fit6$mean


## Select automatic ETS
etsfit <- ets(oVentas)
#forecast model
#Que ETS est치 aplicando para el modelo, error, tendencia y estacionalidad
fventas.ets=forecast(etsfit)
#Results
summary(fventas.ets)

#Modelo M A M
#E
#Multiplicativo para la E - Error crece cuando crece tendencia
#Aditivo para la A
summary(etsfit)

#Plot
plot(fventas.ets)
lines(window(zVentas), type = "o")

#Actual and Forecast

#Prediccion la primera - reales segundas
matrix(c(fventas.ets$mean[1:cOmit],zVentas[(nObs-cOmit+1):nObs]),ncol=2)


## Select automatic ETS
etsfit2<-ets(oVentas,damped=TRUE)
#forecast model
fventas.ets2=forecast(etsfit2)
#Results
summary(fventas.ets2)

#Plot
plot(fventas.ets2)
lines(window(zVentas),type="o")

#Actual and Forecast
matrix(c(fventas.ets2$mean[1:cOmit],fventas.ets$mean[1:cOmit],zVentas[(nObs-cOmit+1):nObs]),ncol=3)

#Plot all models
plot(fventas.ets2)
lines(window(zVentas),type="o")
lines(fventas.ets$mean,type="o",col="red")

model2 <- ets(zVentas, damped = TRUE)
f.model2 <- forecast(model2)
plot(f.model2)

